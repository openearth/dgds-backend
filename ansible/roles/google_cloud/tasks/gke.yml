- name: Create a cluster
  gcp_container_cluster:
    name: "{{ gke_name }}"
    initial_node_count: 1
    node_config:
      machine_type: n1-highmem-2 # Glossis requires 10 GB memory
      disk_size_gb: 100
    location: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: serviceaccount
    service_account_file: "{{ gcp_cred_file }}"
    state: present

- name: Configure google cloud to use application specific credentials
  command: "gcloud config set container/use_application_default_credentials true"

- name: Get cluster credentials
  command: "gcloud container clusters get-credentials {{ gke_name }} --zone {{ gcp_zone }}"
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: Copy serviceaccoutn file to dist
  copy:
    src: "{{ gee_service_account }}"
    dest: ./dist/google_credentials.json

- name: Create secret with serviceaccount
  shell: |
    kubectl create secret generic serviceaccount --from-file=./dist/google_credentials.json
  register: command_result
  failed_when:
    - '"AlreadyExists" not in command_result.stderr'
    - '"secret/serviceaccount created" not in command_result.stderr'
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: Add Persistent Volume Claim
  shell: |
    kubectl apply -f pvc.yml
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: Install argo namespace
  shell: |
    kubectl create ns argo
  register: command_result
  failed_when:
    - command_result.rc != 0
    - "'AlreadyExists' not in command_result.stderr"
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: Create cluster role binding
  shell: |
    "kubectl create clusterrolebinding {{ gcp_service_account_user }}-cluster-admin-binding --clusterrole=cluster-admin --user={{ gcp_service_account_email }}"
  register: command_result
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"
  failed_when:
    - command_result.rc != 0
    - "'AlreadyExists' not in command_result.stderr"

- name: Install argo
  shell: |
    kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo-workflows/stable/manifests/install.yaml
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: Create role binding
  shell: |
    kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default
  register: command_result
  failed_when:
    - command_result.rc != 0
    - "'AlreadyExists' not in command_result.stderr"
  environment:
    KUBECONFIG: ./dist/kube.conf
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

